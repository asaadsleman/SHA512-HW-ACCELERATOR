#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif // !_CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "sha512.h"
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xtmrctr.h"

#define MAX_INPUT_LENGTH 1024
#define TIMER_DEVICE_ID XPAR_AXI_TIMER_0_DEVICE_ID

XTmrCtr tI;
XTmrCtr_Config *tC;

void tmr_init(){
	tC = XTmrCtr_LookupConfig(XPAR_TMRCTR_0_DEVICE_ID);
	XTmrCtr_CfgInitialize(&tI,tC,XPAR_TMRCTR_0_BASEADDR);
}

int demo(char* data) {
	int i = 0;
	SHA512_CTX ctx;
	unsigned char buffer[MAX_INPUT_LENGTH];
	strcpy(buffer, data);
	SHA512_Init(&ctx);
	SHA512_Update(&ctx, buffer, strlen(data));
	SHA512_Final(buffer, &ctx);
	while (i != strlen(data)) {

		xil_printf("%xl", buffer[i]);
		i++;

	}
	return 0;
}

int main() {
	init_platform();

	tmr_init();
	XTmrCtr_Stop(&tI,0);
	XTmrCtr_SetResetValue(&tI,0,0);
	XTmrCtr_Start(&tI,0);

	char* input_string = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
	demo(input_string);
	xil_printf("\r\n");

	u32 cycles = XTmrCtr_GetValue(&tI,0);
	xil_printf("cycles: %u32\r\n",cycles);

	cleanup_platform();
}
